diff --git a/src/EnergyPlus/CMakeLists.txt b/src/EnergyPlus/CMakeLists.txt
index 8455cc0dbf..69e995b925 100644
--- a/src/EnergyPlus/CMakeLists.txt
+++ b/src/EnergyPlus/CMakeLists.txt
@@ -260,6 +260,8 @@ set(SRC
     EvaporativeCoolers.hh
     EvaporativeFluidCoolers.cc
     EvaporativeFluidCoolers.hh
+    ExtCtrl.cc
+    ExtCtrl.hh
     ExhaustAirSystemManager.cc
     ExhaustAirSystemManager.hh
     ExteriorEnergyUse.cc
diff --git a/src/EnergyPlus/Data/CommonIncludes.hh b/src/EnergyPlus/Data/CommonIncludes.hh
index eeadd67115..0ce41c77a9 100644
--- a/src/EnergyPlus/Data/CommonIncludes.hh
+++ b/src/EnergyPlus/Data/CommonIncludes.hh
@@ -145,6 +145,7 @@
 #include <EnergyPlus/EvaporativeCoolers.hh>
 #include <EnergyPlus/EvaporativeFluidCoolers.hh>
 #include <EnergyPlus/ExhaustAirSystemManager.hh>
+#include <EnergyPlus/ExtCtrl.hh>
 #include <EnergyPlus/ExteriorEnergyUse.hh>
 #include <EnergyPlus/ExternalInterface.hh>
 #include <EnergyPlus/FanCoilUnits.hh>
diff --git a/src/EnergyPlus/Data/EnergyPlusData.cc b/src/EnergyPlus/Data/EnergyPlusData.cc
index fa57d19472..d30dabc788 100644
--- a/src/EnergyPlus/Data/EnergyPlusData.cc
+++ b/src/EnergyPlus/Data/EnergyPlusData.cc
@@ -113,6 +113,7 @@ EnergyPlusData::EnergyPlusData()
     this->dataErrTracking = std::make_unique<ErrorTrackingData>();
     this->dataEvapCoolers = std::make_unique<EvaporativeCoolersData>();
     this->dataEvapFluidCoolers = std::make_unique<EvaporativeFluidCoolersData>();
+    this->dataExtCtrl = std::make_unique<ExtCtrlData>();
     this->dataExteriorEnergyUse = std::make_unique<ExteriorEnergyUseData>();
     this->dataExternalInterface = std::make_unique<ExternalInterfaceData>();
     this->dataFanCoilUnits = std::make_unique<FanCoilUnitsData>();
@@ -374,6 +375,7 @@ void EnergyPlusData::clear_state()
     this->dataErrTracking->clear_state();
     this->dataEvapCoolers->clear_state();
     this->dataEvapFluidCoolers->clear_state();
+    this->dataExtCtrl->clear_state();
     this->dataExteriorEnergyUse->clear_state();
     this->dataExternalInterface->clear_state();
     this->dataFanCoilUnits->clear_state();
diff --git a/src/EnergyPlus/Data/EnergyPlusData.hh b/src/EnergyPlus/Data/EnergyPlusData.hh
index 0b85efe73c..9d786610a4 100644
--- a/src/EnergyPlus/Data/EnergyPlusData.hh
+++ b/src/EnergyPlus/Data/EnergyPlusData.hh
@@ -129,6 +129,7 @@ struct EnvironmentData;
 struct ErrorTrackingData;
 struct EvaporativeCoolersData;
 struct EvaporativeFluidCoolersData;
+struct ExtCtrlData;
 struct ExteriorEnergyUseData;
 struct ExternalInterfaceData;
 struct FanCoilUnitsData;
@@ -391,6 +392,7 @@ struct EnergyPlusData : BaseGlobalStruct
     std::unique_ptr<ErrorTrackingData> dataErrTracking;
     std::unique_ptr<EvaporativeCoolersData> dataEvapCoolers;
     std::unique_ptr<EvaporativeFluidCoolersData> dataEvapFluidCoolers;
+    std::unique_ptr<ExtCtrlData> dataExtCtrl;
     std::unique_ptr<ExteriorEnergyUseData> dataExteriorEnergyUse;
     std::unique_ptr<ExternalInterfaceData> dataExternalInterface;
     std::unique_ptr<FanCoilUnitsData> dataFanCoilUnits;
diff --git a/src/EnergyPlus/DataRuntimeLanguage.hh b/src/EnergyPlus/DataRuntimeLanguage.hh
index 31dd0fe8e8..41cef69632 100644
--- a/src/EnergyPlus/DataRuntimeLanguage.hh
+++ b/src/EnergyPlus/DataRuntimeLanguage.hh
@@ -231,10 +231,12 @@ namespace DataRuntimeLanguage {
         TomorrowDifSolarRad,     // Access TomorrowDifSolarRad(hour, timestep)
         TomorrowAlbedo,          // Access TomorrowAlbedo(hour, timestep)
         TomorrowLiquidPrecip,    // Access TomorrowLiquidPrecip(hour, timestep)
+        ExtCtrlObs,              // Access for external control extctrlobs routine
+        ExtCtrlAct,              // Access for external control extctrlobs routine
         Num
     };
 
-    int constexpr NumPossibleOperators(96); // total number of operators and built-in functions
+    int constexpr NumPossibleOperators(98); // total number of operators and built-in functions
 
     int constexpr MaxWhileLoopIterations(1000000); // protect from infinite loop in WHILE loops
 
diff --git a/src/EnergyPlus/ExtCtrl.cc b/src/EnergyPlus/ExtCtrl.cc
new file mode 100644
index 0000000000..4e53283cc2
--- /dev/null
+++ b/src/EnergyPlus/ExtCtrl.cc
@@ -0,0 +1,236 @@
+// EnergyPlus, Copyright (c) 1996-2022, The Board of Trustees of the University of Illinois,
+// The Regents of the University of California, through Lawrence Berkeley National Laboratory
+// (subject to receipt of any required approvals from the U.S. Dept. of Energy), Oak Ridge
+// National Laboratory, managed by UT-Battelle, Alliance for Sustainable Energy, LLC, and other
+// contributors. All rights reserved.
+//
+// NOTICE: This Software was developed under funding from the U.S. Department of Energy and the
+// U.S. Government consequently retains certain rights. As such, the U.S. Government has been
+// granted for itself and others acting on its behalf a paid-up, nonexclusive, irrevocable,
+// worldwide license in the Software to reproduce, distribute copies to the public, prepare
+// derivative works, and perform publicly and display publicly, and to permit others to do so.
+//
+// Redistribution and use in source and binary forms, with or without modification, are permitted
+// provided that the following conditions are met:
+//
+// (1) Redistributions of source code must retain the above copyright notice, this list of
+//     conditions and the following disclaimer.
+//
+// (2) Redistributions in binary form must reproduce the above copyright notice, this list of
+//     conditions and the following disclaimer in the documentation and/or other materials
+//     provided with the distribution.
+//
+// (3) Neither the name of the University of California, Lawrence Berkeley National Laboratory,
+//     the University of Illinois, U.S. Dept. of Energy nor the names of its contributors may be
+//     used to endorse or promote products derived from this software without specific prior
+//     written permission.
+//
+// (4) Use of EnergyPlus(TM) Name. If Licensee (i) distributes the software in stand-alone form
+//     without changes from the version obtained under this License, or (ii) Licensee makes a
+//     reference solely to the software portion of its product, Licensee must refer to the
+//     software as "EnergyPlus version X" software, where "X" is the version number Licensee
+//     obtained under this License and may not use a different name for the software. Except as
+//     specifically required in this Section (4), Licensee shall not use in a company name, a
+//     product name, in advertising, publicity, or other promotional activities any name, trade
+//     name, trademark, logo, or other designation of "EnergyPlus", "E+", "e+" or confusingly
+//     similar designation, without the U.S. Department of Energy's prior written consent.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
+// AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+// POSSIBILITY OF SUCH DAMAGE.
+
+// C++ Headers
+#include <cstdlib>
+#include <fstream>
+#include <iostream>
+#include <string>
+
+// ObjexxFCL Headers
+#include <ObjexxFCL/Fmath.hh>
+// #include <ObjexxFCL/gio.hh>
+#include <ObjexxFCL/string.functions.hh>
+
+// EnergyPlus Headers
+#include <EnergyPlus/CommandLineInterface.hh>
+#include <EnergyPlus/Data/EnergyPlusData.hh>
+#include <EnergyPlus/DataEnvironment.hh>
+#include <EnergyPlus/DataGlobals.hh>
+#include <EnergyPlus/DataHVACGlobals.hh>
+#include <EnergyPlus/DataPrecisionGlobals.hh>
+#include <EnergyPlus/DisplayRoutines.hh>
+#include <EnergyPlus/ExtCtrl.hh>
+#include <EnergyPlus/General.hh>
+#include <EnergyPlus/UtilityRoutines.hh>
+
+#include <array>
+#include <string>
+
+namespace EnergyPlus {
+
+namespace ExtCtrl {
+    // Module containing the external control
+
+    // MODULE INFORMATION:
+    //       AUTHOR         Takao Moriyama, IBM Corporation
+    //       DATE WRITTEN   December 2017
+    //       MODIFIED       na
+    //       RE-ENGINEERED  na
+
+    // PURPOSE OF THIS MODULE:
+    // This module provides a repository for suporting external control
+
+    // Object Data
+
+    // Subroutine Specifications for the Module
+
+    // Functions
+
+    void InitializeExtCtrlRoutines(EnergyPlusData &state)
+    {
+        if (state.dataExtCtrl->AlreadyDidOnce) {
+            return;
+        }
+
+        // DisplayString("InitializeExtCtrlRoutine(): First call");
+        get_environment_variable(cActPipeFilename, state.dataExtCtrl->act_filename);
+        if (state.dataExtCtrl->act_filename.empty()) {
+            ShowFatalError(state, "InitializeExtCtrlActRoutines: Environment variable ACT_PIPE_FILENAME not specified");
+        }
+        get_environment_variable(cObsPipeFilename, state.dataExtCtrl->obs_filename);
+        if (state.dataExtCtrl->obs_filename.empty()) {
+            ShowFatalError(state, "InitializeExtCtrlActRoutines: Environment variable OBS_PIPE_FILENAME not specified");
+        }
+
+        state.dataExtCtrl->AlreadyDidOnce = true;
+    }
+
+    std::string ExtCtrlRead(EnergyPlusData &state)
+    {
+        auto &act_ifs = state.dataExtCtrl->act_ifs;
+        if (!act_ifs.is_open()) {
+            act_ifs.open(state.dataExtCtrl->act_filename);
+            act_ifs.rdbuf()->pubsetbuf(nullptr, 0); // Making unbuffered
+            if (!act_ifs.is_open()) {
+                ShowFatalError(state, "ExtCtrlRead: ACT file could not open");
+                return "";
+            }
+            DisplayString(state, "ExtCtrlRead: Opened ACT file: " + std::string(state.dataExtCtrl->act_filename));
+        }
+
+        // We just do an infinite loop until a value comes in
+        std::string line;
+        size_t idx = std::string::npos;
+        while (idx == std::string::npos) {
+            act_ifs >> line;
+            idx = line.find(',');
+            // TODO: include some kind of timeout?
+        }
+
+        std::string seq = line.substr(0, idx);
+        std::string val = line.substr(idx + 1, std::string::npos);
+        assert(state.dataExtCtrl->act_seq == std::stoi(seq));
+        state.dataExtCtrl->act_seq++;
+        return val;
+    }
+
+    void ExtCtrlWrite(EnergyPlusData &state, const std::string &str)
+    {
+        if (!state.dataExtCtrl->obs_ofs.is_open()) {
+            state.dataExtCtrl->obs_ofs.open(state.dataExtCtrl->obs_filename);
+            if (!state.dataExtCtrl->obs_ofs.is_open()) {
+                ShowFatalError(state, "ExtCtrlWrite: InitializeExtCtrlRoutine: OBS file could not open");
+                return;
+            }
+            DisplayString(state, "ExtCtrlWrite: Opened OBS file: " + std::string(state.dataExtCtrl->obs_filename));
+        }
+        state.dataExtCtrl->obs_ofs << state.dataExtCtrl->obs_seq << "," << str << std::endl;
+        state.dataExtCtrl->obs_seq++;
+    }
+
+    void ExtCtrlFlush(EnergyPlusData &state)
+    {
+        state.dataExtCtrl->obs_ofs << "DELIMITER" << std::endl;
+        state.dataExtCtrl->obs_ofs.flush();
+    }
+
+    bool ExtCtrlObs(EnergyPlusData &state,
+                    int const index,   // command code
+                    Real64 const value // command value
+    )
+    {
+        InitializeExtCtrlRoutines(state);
+
+        if (index >= CMD_OBS_INDEX_LOW && index <= CMD_OBS_INDEX_HIGH) {
+            // DisplayString(format("ExtCtrlObs: set obs[{}] = {}", cmdInt, arg));
+            state.dataExtCtrl->obss[index - 1] = value;
+            return true;
+        } else if (index == CMD_OBS_INIT) {
+            // DisplayString("ExtCtrlObs: INIT");
+            //  If not connected to the server, try to connect.
+            //  TODO:
+            // ShowFatalError("Failed to connect to external service");
+            return true;
+        }
+        // TODO: Show error code
+        ShowWarningMessage(state, format("ExtCtrlObs: Obs index {} is out of range [{}...{}]", index, CMD_OBS_INDEX_LOW, CMD_OBS_INDEX_HIGH));
+        return false;
+    }
+
+    bool ExtCtrlAct(EnergyPlusData &state,
+                    int const cmd, // command code
+                    int const arg, // command value
+                    Real64 &readValue)
+    {
+        InitializeExtCtrlRoutines(state);
+
+        if (cmd >= CMD_ACT_INDEX_LOW && cmd <= CMD_ACT_INDEX_HIGH) {
+            // DisplayString("ExtCtrlAct: get acts[" + std::to_string(cmd) + "] = " +
+            // std::to_string(state.dataExtCtrl->acts[cmd - 1]));
+            readValue = state.dataExtCtrl->acts[cmd - 1];
+            return true;
+        } else if (cmd == CMD_ACT_REQ) {
+            if (!(arg >= 0 && arg <= CMD_ACT_INDEX_HIGH)) {
+                ShowWarningMessage(state, format("ExtCtrlAct:  Number of obss {} it out of range [0...{}]", arg, CMD_ACT_INDEX_HIGH));
+                return false;
+            }
+            // TODO: really want that?
+            // skip system timestep
+            if (state.dataHVACGlobal->TimeStepSys < state.dataGlobal->TimeStepZone) {
+                return true;
+            }
+
+            // Send observation data to the server, and receive next action.
+            ExtCtrlWrite(state, std::to_string(arg));
+            for (int i = CMD_ACT_INDEX_LOW; i <= arg; i++) {
+                ExtCtrlWrite(state, std::to_string(state.dataExtCtrl->obss[i - 1]));
+            }
+            ExtCtrlFlush(state);
+
+            // Get action data
+            std::string line = ExtCtrlRead(state);
+            int NumActsReceived = std::stoi(line);
+            assert(NumActsReceived >= 0 && NumActsReceived <= CMD_ACT_INDEX_HIGH);
+            for (int i = 1; i <= NumActsReceived; i++) {
+                line = ExtCtrlRead(state);
+                double val = std::stod(line);
+                if (i <= CMD_ACT_INDEX_HIGH) {
+                    state.dataExtCtrl->acts[i - 1] = val;
+                }
+            }
+
+            return true;
+        }
+
+        ShowWarningMessage(state, format("ExtCtrlAct: Act index {} is out of range [{}...{}]", cmd, CMD_ACT_INDEX_LOW, CMD_ACT_INDEX_HIGH));
+        return false;
+    }
+
+} // namespace ExtCtrl
+
+} // namespace EnergyPlus
diff --git a/src/EnergyPlus/ExtCtrl.hh b/src/EnergyPlus/ExtCtrl.hh
new file mode 100644
index 0000000000..5b307b0b44
--- /dev/null
+++ b/src/EnergyPlus/ExtCtrl.hh
@@ -0,0 +1,141 @@
+// EnergyPlus, Copyright (c) 1996-2022, The Board of Trustees of the University of Illinois,
+// The Regents of the University of California, through Lawrence Berkeley National Laboratory
+// (subject to receipt of any required approvals from the U.S. Dept. of Energy), Oak Ridge
+// National Laboratory, managed by UT-Battelle, Alliance for Sustainable Energy, LLC, and other
+// contributors. All rights reserved.
+//
+// NOTICE: This Software was developed under funding from the U.S. Department of Energy and the
+// U.S. Government consequently retains certain rights. As such, the U.S. Government has been
+// granted for itself and others acting on its behalf a paid-up, nonexclusive, irrevocable,
+// worldwide license in the Software to reproduce, distribute copies to the public, prepare
+// derivative works, and perform publicly and display publicly, and to permit others to do so.
+//
+// Redistribution and use in source and binary forms, with or without modification, are permitted
+// provided that the following conditions are met:
+//
+// (1) Redistributions of source code must retain the above copyright notice, this list of
+//     conditions and the following disclaimer.
+//
+// (2) Redistributions in binary form must reproduce the above copyright notice, this list of
+//     conditions and the following disclaimer in the documentation and/or other materials
+//     provided with the distribution.
+//
+// (3) Neither the name of the University of California, Lawrence Berkeley National Laboratory,
+//     the University of Illinois, U.S. Dept. of Energy nor the names of its contributors may be
+//     used to endorse or promote products derived from this software without specific prior
+//     written permission.
+//
+// (4) Use of EnergyPlus(TM) Name. If Licensee (i) distributes the software in stand-alone form
+//     without changes from the version obtained under this License, or (ii) Licensee makes a
+//     reference solely to the software portion of its product, Licensee must refer to the
+//     software as "EnergyPlus version X" software, where "X" is the version number Licensee
+//     obtained under this License and may not use a different name for the software. Except as
+//     specifically required in this Section (4), Licensee shall not use in a company name, a
+//     product name, in advertising, publicity, or other promotional activities any name, trade
+//     name, trademark, logo, or other designation of "EnergyPlus", "E+", "e+" or confusingly
+//     similar designation, without the U.S. Department of Energy's prior written consent.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
+// AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+// POSSIBILITY OF SUCH DAMAGE.
+
+#ifndef ExtCtrl_hh_INCLUDED
+#define ExtCtrl_hh_INCLUDED
+
+// C++ Headers
+#include <cassert>
+#include <cmath>
+
+// ObjexxFCL Headers
+// #include <ObjexxFCL/bit.hh>
+#include <ObjexxFCL/Array1D.hh>
+#include <ObjexxFCL/Fmath.hh>
+
+// EnergyPlus Headers
+#include <EnergyPlus/Data/BaseData.hh>
+#include <EnergyPlus/DataGlobals.hh>
+#include <EnergyPlus/EnergyPlus.hh>
+#include <EnergyPlus/UtilityRoutines.hh>
+
+namespace EnergyPlus {
+
+// Forward declarations
+struct EnergyPlusData;
+
+namespace ExtCtrl {
+
+    int constexpr CMD_OBS_INIT(0);
+    int constexpr NUM_OBSS(100);
+    int constexpr CMD_OBS_INDEX_LOW(1);
+    int constexpr CMD_OBS_INDEX_HIGH(NUM_OBSS);
+    Real64 constexpr OBS_DATA_NULL(-123.0);
+
+    // For receiving action
+    int constexpr CMD_ACT_REQ(0);
+    int constexpr NUM_ACTS(100);
+    int constexpr CMD_ACT_INDEX_LOW(1);
+    int constexpr CMD_ACT_INDEX_HIGH(NUM_ACTS);
+    Real64 constexpr ACT_DATA_NULL(-456.0);
+
+    constexpr const char *cActPipeFilename("ACT_PIPE_FILENAME");
+    constexpr const char *cObsPipeFilename("OBS_PIPE_FILENAME");
+
+    void InitializeExtCtrlRoutines(EnergyPlusData &state);
+
+    // Sends observations from E+ (reading a sensor) to the FIFO
+    bool ExtCtrlObs(EnergyPlusData &state,
+                    int const index,   // command code
+                    Real64 const value // command value
+    );
+
+    // Retrieve computed values from the FIFO
+    // Special case is when cmd = CMD_ACT_REQ(0), then second args tells how many datapoints to read
+    // Returns -1.0 in case of problem
+    bool ExtCtrlAct(EnergyPlusData &state,
+                    int const cmd,    // command code
+                    int const arg,    // command value
+                    Real64 &readValue // Output: Returned value, only valid if return value from function is true
+    );
+
+} // namespace ExtCtrl
+
+struct ExtCtrlData : BaseGlobalStruct
+{
+    bool AlreadyDidOnce = false;
+    std::array<Real64, ExtCtrl::NUM_OBSS> obss{};
+    std::array<Real64, ExtCtrl::NUM_ACTS> acts{};
+
+    std::ifstream act_ifs;
+    std::ofstream obs_ofs;
+    std::string act_filename;
+    std::string obs_filename;
+    int act_seq = 0;
+    int obs_seq = 0;
+
+    ExtCtrlData()
+    {
+        obss.fill(ExtCtrl::OBS_DATA_NULL);
+        acts.fill(ExtCtrl::ACT_DATA_NULL);
+    }
+
+    void clear_state() override
+    {
+        this->AlreadyDidOnce = false;
+        obss.fill(ExtCtrl::OBS_DATA_NULL);
+        acts.fill(ExtCtrl::ACT_DATA_NULL);
+        act_filename.clear();
+        obs_filename.clear();
+        act_seq = 0;
+        obs_seq = 0;
+    }
+};
+
+} // namespace EnergyPlus
+
+#endif
diff --git a/src/EnergyPlus/RuntimeLanguageProcessor.cc b/src/EnergyPlus/RuntimeLanguageProcessor.cc
index 6fc567ee91..bd55f986cb 100644
--- a/src/EnergyPlus/RuntimeLanguageProcessor.cc
+++ b/src/EnergyPlus/RuntimeLanguageProcessor.cc
@@ -68,6 +68,7 @@
 #include <EnergyPlus/DataIPShortCuts.hh>
 #include <EnergyPlus/DataSystemVariables.hh>
 #include <EnergyPlus/EMSManager.hh>
+#include <EnergyPlus/ExtCtrl.hh>
 #include <EnergyPlus/General.hh>
 #include <EnergyPlus/GlobalNames.hh>
 #include <EnergyPlus/InputProcessing/InputProcessor.hh>
@@ -1299,7 +1300,8 @@ void ParseExpression(EnergyPlusData &state,
                     i_parse("@TOMORROWSKYTEMP", ErlFunc::TomorrowSkyTemp) || i_parse("@TOMORROWHORIZIRSKY", ErlFunc::TomorrowHorizIRSky) ||
                     i_parse("@TOMORROWBEAMSOLARRAD", ErlFunc::TomorrowBeamSolarRad) ||
                     i_parse("@TOMORROWDIFSOLARRAD", ErlFunc::TomorrowDifSolarRad) || i_parse("@TOMORROWALBEDO", ErlFunc::TomorrowAlbedo) ||
-                    i_parse("@TOMORROWLIQUIDPRECIP", ErlFunc::TomorrowLiquidPrecip)) {
+                    i_parse("@TOMORROWLIQUIDPRECIP", ErlFunc::TomorrowLiquidPrecip) || i_parse("@EXTCTRLOBS", ErlFunc::ExtCtrlObs) ||
+                    i_parse("@EXTCTRLACT", ErlFunc::ExtCtrlAct)) {
                     // was a built in function operator
                 } else { // throw error
                     if (state.dataSysVars->DeveloperFlag) print(state.files.debug, "ERROR \"{}\"\n", String);
@@ -2504,6 +2506,21 @@ ErlValueType EvaluateExpression(EnergyPlusData &state, int const ExpressionNum,
                                          Operand(2).Number,
                                          state.dataWeatherManager->TomorrowLiquidPrecip,
                                          ReturnValue);
+                } else if (SELECT_CASE_var == ErlFunc::ExtCtrlObs) {
+                    if (ExtCtrl::ExtCtrlObs(state, Operand(1).Number, Operand(2).Number)) {
+                        ReturnValue = SetErlValueNumber(0.0); // OK
+                    } else {
+                        ReturnValue.Type = Value::Error;
+                        ReturnValue.Error = "Error in ExtCtrlObs";
+                    }
+                } else if (SELECT_CASE_var == ErlFunc::ExtCtrlAct) {
+                    Real64 readValue = 0.0;
+                    if (ExtCtrl::ExtCtrlAct(state, Operand(1).Number, Operand(2).Number, readValue)) {
+                        ReturnValue = SetErlValueNumber(readValue);
+                    } else {
+                        ReturnValue.Type = Value::Error;
+                        ReturnValue.Error = "Error in ExtCtrlAct";
+                    }
                 } else {
                     // throw Error!
                     ShowFatalError(state, "caught unexpected Expression(ExpressionNum)%Operator in EvaluateExpression");
@@ -4344,6 +4361,14 @@ void SetupPossibleOperators(EnergyPlusData &state)
     state.dataRuntimeLang->PossibleOperators(static_cast<int>(ErlFunc::TomorrowLiquidPrecip)).NumOperands = 2;
     state.dataRuntimeLang->PossibleOperators(static_cast<int>(ErlFunc::TomorrowLiquidPrecip)).Code = ErlFunc::TomorrowLiquidPrecip;
 
+    state.dataRuntimeLang->PossibleOperators(static_cast<int>(ErlFunc::ExtCtrlObs)).Symbol = "@EXTCTRLOBS";
+    state.dataRuntimeLang->PossibleOperators(static_cast<int>(ErlFunc::ExtCtrlObs)).NumOperands = 2;
+    state.dataRuntimeLang->PossibleOperators(static_cast<int>(ErlFunc::ExtCtrlObs)).Code = ErlFunc::ExtCtrlObs;
+
+    state.dataRuntimeLang->PossibleOperators(static_cast<int>(ErlFunc::ExtCtrlAct)).Symbol = "@EXTCTRLACT";
+    state.dataRuntimeLang->PossibleOperators(static_cast<int>(ErlFunc::ExtCtrlAct)).NumOperands = 2;
+    state.dataRuntimeLang->PossibleOperators(static_cast<int>(ErlFunc::ExtCtrlAct)).Code = ErlFunc::ExtCtrlAct;
+
     state.dataRuntimeLangProcessor->AlreadyDidOnce = true;
 }
 
diff --git a/src/EnergyPlus/api/datatransfer.cc b/src/EnergyPlus/api/datatransfer.cc
index 565065bf64..c6b4963ca8 100644
--- a/src/EnergyPlus/api/datatransfer.cc
+++ b/src/EnergyPlus/api/datatransfer.cc
@@ -45,6 +45,7 @@
 // OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
+#include "EnergyPlus/ExtCtrl.hh"
 #include <cmath>
 
 #include <ObjexxFCL/ArrayS.functions.hh>
@@ -1192,3 +1193,25 @@ Real64 currentSimTime(EnergyPlusState state)
     Real64 value = (thisState->dataGlobal->DayOfSim - 1) * 24 + currentTime(state);
     return value;
 }
+
+int extCtrlObs(EnergyPlusState state, int index, Real64 value)
+{
+    auto *thisState = reinterpret_cast<EnergyPlus::EnergyPlusData *>(state);
+    int return_code = 0;
+    if (!EnergyPlus::ExtCtrl::ExtCtrlObs(*thisState, index, value)) {
+        thisState->dataPluginManager->apiErrorFlag = true;
+        return_code = 1;
+    }
+    return return_code;
+}
+
+Real64 extCtrlAct(EnergyPlusState state, int cmd, int arg)
+{
+    auto *thisState = reinterpret_cast<EnergyPlus::EnergyPlusData *>(state);
+    Real64 value = 0.0;
+    if (!EnergyPlus::ExtCtrl::ExtCtrlAct(*thisState, cmd, arg, value)) {
+        value = -1.0;
+        thisState->dataPluginManager->apiErrorFlag = true;
+    }
+    return value;
+}
diff --git a/src/EnergyPlus/api/datatransfer.h b/src/EnergyPlus/api/datatransfer.h
index baa55fa1f1..50784ec114 100644
--- a/src/EnergyPlus/api/datatransfer.h
+++ b/src/EnergyPlus/api/datatransfer.h
@@ -803,6 +803,28 @@ ENERGYPLUSLIB_API Real64 tomorrowWeatherLiquidPrecipitationAtTime(EnergyPlusStat
 /// \see apiErrorFlag
 ENERGYPLUSLIB_API Real64 currentSimTime(EnergyPlusState state);
 
+/// \brief Sends observations from E+ to the Obs FIFO
+/// \param[in] state An active EnergyPlusState instance created with `stateNew`.
+/// \param[in] index The index of the observation array to store it in
+/// \param[in] value The value from E+ (eg a sensor, or a calculated value)
+/// \return a return code of 0 if it worked fine, 1 otherwise
+/// \remark The behavior of this function is not well-defined until the `apiDataFullyReady` function returns true.
+/// \remark The API error flag will be set if an issue occurs in the lookup, use `apiErrorFlag` to check
+/// \see apiDataFullyReady
+/// \see apiErrorFlag
+ENERGYPLUSLIB_API int extCtrlObs(EnergyPlusState state, int index, Real64 value);
+
+/// \brief Reads external data from the Act FIFO
+/// \param[in] state An active EnergyPlusState instance created with `stateNew`.
+/// \param[in] cmd The index of the array to read
+/// \param[in] arg The number of observations that needs reading if cmd = 0
+/// \return the value it read, or 0.0 if it just worked when cmd=0, or -1.0 if something went wrong
+/// \remark The behavior of this function is not well-defined until the `apiDataFullyReady` function returns true.
+/// \remark The API error flag will be set if an issue occurs in the lookup, use `apiErrorFlag` to check
+/// \see apiDataFullyReady
+/// \see apiErrorFlag
+ENERGYPLUSLIB_API Real64 extCtrlAct(EnergyPlusState state, int cmd, int arg);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/EnergyPlus/api/datatransfer.py b/src/EnergyPlus/api/datatransfer.py
index 01be38d7d3..2b5e0c9498 100644
--- a/src/EnergyPlus/api/datatransfer.py
+++ b/src/EnergyPlus/api/datatransfer.py
@@ -247,6 +247,10 @@ class DataExchange:
         self.api.tomorrowWeatherLiquidPrecipitationAtTime.restype = RealEP
         self.api.currentSimTime.argtypes = [c_void_p]
         self.api.currentSimTime.restype = RealEP
+        self.api.extCtrlObs.argtypes = [c_void_p, c_int, RealEP]
+        self.api.extCtrlObs.restype = c_int
+        self.api.extCtrlAct.argtypes = [c_void_p, c_int, c_int]
+        self.api.extCtrlAct.restype = RealEP
 
     def list_available_api_data_csv(self, state: c_void_p) -> bytes:
         """
@@ -1436,3 +1440,25 @@ class DataExchange:
         :return: Value of the simulation time from the start of the environment in fractional hours
         """
         return self.api.currentSimTime(state)
+
+    def extctrl_obs(self, state: c_void_p, index: int, value: float) -> int:
+        """
+        Sends observations from E+ to the Obs FIFO
+
+        :param state: An active EnergyPlus "state" that is returned from a call to `api.state_manager.new_state()`.
+        :param index: The index of the observation array to store it in
+        :param value: The value from E+ (eg a sensor, or a calculated value)
+        :return: a return code of 0 if it worked fine, 1 otherwise
+        """
+        return self.api.extCtrlObs(state, index, value)
+
+    def extctrl_act(self, state: c_void_p, cmd: int, arg: int) -> float:
+        """
+        Reads external data from the Act FIFO
+
+        :param state: An active EnergyPlus "state" that is returned from a call to `api.state_manager.new_state()`.
+        :param cmd: The index of the array to read, (or 0 to tell it to read)
+        :param arg: The number of observations that needs reading if cmd = 0, ignored otherwise
+        :return: the value it read, or 0.0 if it just worked when cmd=0, or -1.0 if something went wrong
+        """
+        return self.api.extCtrlAct(state, cmd, arg)
